:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the UDPServer.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_UDPServer:

UDPServer
=========

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Helper class to implement a UDP server.

Description
-----------

A simple server that opens a UDP socket and returns connected :ref:`PacketPeerUDP<class_PacketPeerUDP>` upon receiving new packets. See also :ref:`PacketPeerUDP.connect_to_host<class_PacketPeerUDP_method_connect_to_host>`.

Below a small example of how it can be used:

::

    # server.gd
    extends Node
    
    var server := UDPServer.new()
    var peers = []
    
    func _ready():
        server.listen(4242)
    
    func _process(delta):
        if server.is_connection_available():
            var peer : PacketPeerUDP = server.take_connection()
            var pkt = peer.get_packet()
            print("Accepted peer: %s:%s" % [peer.get_packet_ip(), peer.get_packet_port()])
            print("Received data: %s" % [pkt.get_string_from_utf8()])
            # Reply so it knows we received the message.
            peer.put_packet(pkt)
            # Keep a reference so we can keep contacting the remote peer.
            peers.append(peer)
    
        for i in range(0, peers.size()):
            pass # Do something with the connected peers.
    

::

    # client.gd
    extends Node
    
    var udp := PacketPeerUDP.new()
    var connected = false
    
    func _ready():
        udp.connect_to_host("127.0.0.1", 4242)
    
    func _process(delta):
        if !connected:
            # Try to contact server
            udp.put_packet("The answer is... 42!".to_utf8())
        if udp.get_available_packet_count() > 0:
            print("Connected: %s" % udp.get_packet().get_string_from_utf8())
            connected = true

Methods
-------

+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`is_connection_available<class_UDPServer_method_is_connection_available>` **(** **)** const                                  |
+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`is_listening<class_UDPServer_method_is_listening>` **(** **)** const                                                        |
+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`listen<class_UDPServer_method_listen>` **(** :ref:`int<class_int>` port, :ref:`String<class_String>` bind_address="*" **)** |
+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`stop<class_UDPServer_method_stop>` **(** **)**                                                                              |
+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PacketPeerUDP<class_PacketPeerUDP>` | :ref:`take_connection<class_UDPServer_method_take_connection>` **(** **)**                                                        |
+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+

Method Descriptions
-------------------

.. _class_UDPServer_method_is_connection_available:

- :ref:`bool<class_bool>` **is_connection_available** **(** **)** const

Returns ``true`` if a packet with a new address/port combination is received on the socket.

----

.. _class_UDPServer_method_is_listening:

- :ref:`bool<class_bool>` **is_listening** **(** **)** const

Returns ``true`` if the socket is open and listening on a port.

----

.. _class_UDPServer_method_listen:

- :ref:`Error<enum_@GlobalScope_Error>` **listen** **(** :ref:`int<class_int>` port, :ref:`String<class_String>` bind_address="*" **)**

Starts the server by opening a UDP socket listening on the given port. You can optionally specify a ``bind_address`` to only listen for packets sent to that address. See also :ref:`PacketPeerUDP.listen<class_PacketPeerUDP_method_listen>`.

----

.. _class_UDPServer_method_stop:

- void **stop** **(** **)**

Stops the server, closing the UDP socket if open. Will not disconnect any connected :ref:`PacketPeerUDP<class_PacketPeerUDP>`.

----

.. _class_UDPServer_method_take_connection:

- :ref:`PacketPeerUDP<class_PacketPeerUDP>` **take_connection** **(** **)**

Returns a :ref:`PacketPeerUDP<class_PacketPeerUDP>` connected to the address/port combination of the first packet in queue. Will return ``null`` if no packet is in queue. See also :ref:`PacketPeerUDP.connect_to_host<class_PacketPeerUDP_method_connect_to_host>`.

